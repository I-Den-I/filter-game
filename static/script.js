const filterNames = {
  "blur": "–†–æ–∑–º–∏—Ç—Ç—è",
  "brightness": "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å",
  "contrast": "–ö–æ–Ω—Ç—Ä–∞—Å—Ç",
  "grayscale": "–ß–æ—Ä–Ω–æ-–±—ñ–ª–µ",
  "hue-rotate": "–í—ñ–¥—Ç—ñ–Ω–æ–∫",
  "invert": "–Ü–Ω–≤–µ—Ä—Å—ñ—è",
  "saturate": "–ù–∞—Å–∏—á–µ–Ω—ñ—Å—Ç—å",
  "sepia": "–°–µ–ø—ñ—è",
  "opacity": "–ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å",
  "drop-shadow": "–¢—ñ–Ω—å",

  "brightness-2": "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å+",
  "contrast-2": "–ö–æ–Ω—Ç—Ä–∞—Å—Ç+",
  "blur-2": "–†–æ–∑–º–∏—Ç—Ç—è+"
};

let currentPhoto = null;

let score = 0; // –≥–ª–æ–±–∞–ª—å–Ω–æ

function addPoints(points) {
  score += points;
  const scoreDiv = document.getElementById("score");
  scoreDiv.textContent = `–û—á–∫–∏: ${score}`;
  scoreDiv.dataset.value = score;
}

// –ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ø—ñ–Ω–≥—É –∫–ª—é—á–∞ ‚Üí –≤–∞–ª—ñ–¥–Ω–∞ CSS-—Ñ—É–Ω–∫—Ü—ñ—è
function getFilterCSS(key, val) {
  // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–µ–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:
  // - –¥–ª—è brightness/contrast/saturate/... ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∏—Å–ª–æ (1.0 = 100%)
  // - –¥–ª—è opacity ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 0..1
  // - –¥–ª—è blur ‚Äî px
  // - –¥–ª—è hue-rotate ‚Äî deg
  // - drop-shadow ‚Äî px offset

  if (key === "blur" || key === "blur-2") {
    return `blur(${val}px)`;
  }
  if (key === "hue-rotate") {
    return `hue-rotate(${val}deg)`;
  }
  if (key === "drop-shadow") {
    // —Ä–æ–±–∏–º–æ –ø–æ–º—ñ—Ä–Ω—É —Ç—ñ–Ω—å
    return `drop-shadow(${val}px ${val}px 5px rgba(0,0,0,0.6))`;
  }
  if (key === "opacity") {
    // val –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ 30..100 ‚Üí –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ —É 0..1
    const v = Math.max(0, Math.min(1, val / 100));
    return `opacity(${v})`;
  }

  // brightness/contrast/saturate/sepi–∞/grayscale/invert ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∏—Å–ª–æ (val/100)
  if (key === "brightness" || key === "brightness-2") {
    return `brightness(${(val/100).toFixed(2)})`;
  }
  if (key === "contrast" || key === "contrast-2") {
    return `contrast(${(val/100).toFixed(2)})`;
  }
  if (key === "saturate") {
    return `saturate(${(val/100).toFixed(2)})`;
  }
  if (key === "sepia") {
    return `sepia(${(val/100).toFixed(2)})`;
  }
  if (key === "grayscale") {
    return `grayscale(${(val/100).toFixed(2)})`;
  }
  if (key === "invert") {
    return `invert(${(val/100).toFixed(2)})`;
  }

  // fallback (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —ñ–Ω—à–∏—Ö –Ω–∞–∑–≤)
  return `${key}(${val})`;
}


// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –±–µ–∫–µ–Ω–¥—É
async function loadPhoto() {
  const res = await fetch("/next_photo");
  const data = await res.json();

  currentPhoto = data.photo;
  document.getElementById("level").textContent = `–†—ñ–≤–µ–Ω—å ${data.level} –∑ ${data.total}`;

  const img = document.getElementById("photo");
  img.classList.remove("ready");
  img.src = data.photo.path;
  img.onload = () => img.classList.add("ready");

  const slidersDiv = document.getElementById("sliders");
  slidersDiv.innerHTML = "";

  // ranges: –æ–±'—î–∫—Ç {filter: [min,max], ...}
  const ranges = data.ranges || {};

  for (const [f, appliedVal] of Object.entries(data.filters)) {
    const range = ranges[f] || [0, appliedVal || 100];

    const wrapper = document.createElement("div");
    wrapper.className = "filter-item";

    const label = document.createElement("label");
    label.textContent = filterNames[f] || f;
    wrapper.appendChild(label);

    const slider = document.createElement("input");
    slider.type = "range";
    slider.min = range[0];
    slider.max = range[1];
    slider.value = appliedVal;
    slider.dataset.filter = f;
    slider.dataset.initial = appliedVal; // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ "–∑–∞—à—É–º–ª–µ–Ω–µ" –∑–Ω–∞—á–µ–Ω–Ω—è

    // –ø–æ–∫–∞–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—É—á (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è UX)
    const valueDisplay = document.createElement("span");
    valueDisplay.className = "val-display";
    valueDisplay.style.float = "right";
    valueDisplay.style.marginLeft = "8px";
    valueDisplay.textContent = slider.value;
    label.appendChild(valueDisplay);

    slider.oninput = () => {
      // –ø—Ä–∏ —Ä—É—Å—ñ —Å–ª–∞–π–¥–µ—Ä–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
      valueDisplay.textContent = slider.value;
      const difficulty = document.getElementById("difficulty").value;
      if (difficulty === "hard") {
        // —Ö–∞–æ—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º: –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–µ —Å—Ç—Ä–∏–±–∞—Ç–∏
        const min = parseInt(slider.min, 10);
        const max = parseInt(slider.max, 10);
        slider.value = Math.floor(Math.random() * (max - min + 1)) + min;
        valueDisplay.textContent = slider.value;
      }
      updateFilters();
    };

    wrapper.appendChild(slider);
    slidersDiv.appendChild(wrapper);
  }

  updateFilters();
}


// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è CSS-—Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
function updateFilters() {
  const sliders = document.querySelectorAll("#sliders input");
  let filterStr = "";

  sliders.forEach(slider => {
    const f = slider.dataset.filter;
    const val = Number(slider.value);
    filterStr += getFilterCSS(f, val) + " ";
  });

  document.getElementById("photo").style.filter = filterStr.trim();
}


async function checkFilters() {
  const sliders = document.querySelectorAll("#sliders input");
  const filters = {};
  sliders.forEach(slider => filters[slider.dataset.filter] = parseInt(slider.value));

  const difficulty = document.getElementById("difficulty").value;

  const res = await fetch("/check_result", {
    method: "POST",
    headers: {"Content-Type": "application/json"},
    body: JSON.stringify({filters, difficulty})
  });

  const data = await res.json();
  const resultEl = document.getElementById("result");
  resultEl.classList.add("show");

  if (data.success) {
    // ‚úÖ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –æ—á–∫—ñ–≤
    let points = 0;
    if (difficulty === "easy") points = 100;
    if (difficulty === "medium") points = 200;
    if (difficulty === "hard") points = 500;
    addPoints(points);

    resultEl.textContent = `‚úÖ –î—É–∂–µ —Å—Ö–æ–∂–µ!`;

    // –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    setTimeout(async () => {
      resultEl.classList.remove("show");

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
      const levelText = document.getElementById("level").textContent; 
      // —Ñ–æ—Ä–º–∞—Ç—É "–†—ñ–≤–µ–Ω—å X –∑ Y"
      const match = levelText.match(/–†—ñ–≤–µ–Ω—å (\d+) –∑ (\d+)/);
      if (match) {
        const level = parseInt(match[1]);
        const total = parseInt(match[2]);

        if (level === total) {
          // üéâ –£—Å—ñ —Ä—ñ–≤–Ω—ñ –ø—Ä–æ–π–¥–µ–Ω–æ ‚Üí –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
          const name = document.getElementById("playerName").value || "–ê–Ω–æ–Ω—ñ–º";
          const score = parseInt(document.getElementById("score").dataset.value) || 0;

          await fetch("/add_winner", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({name, score})
          });

          alert(`–í—ñ—Ç–∞—î–º–æ, ${name}! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥—Ä—É –∑ ${score} –æ—á–∫–∞–º–∏ üèÜ`);
        } else {
          loadPhoto(); // —â–µ —î —Ä—ñ–≤–Ω—ñ ‚Üí –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π
        }
      }
    }, 1200);

  } else {
    resultEl.textContent = `‚ùå –©–µ –Ω–µ –¥—É–∂–µ —Å—Ö–æ–∂–µ! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.`;
  }
}



function resetSlidersToInitial() {
  const sliders = document.querySelectorAll("#sliders input");
  sliders.forEach(slider => {
    // ‚úÖ –¶–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑ –±–µ–∫–µ–Ω–¥—É —è–∫ –ø–æ—á–∞—Ç–∫–æ–≤–µ "–∑–∞—à—É–º–ª–µ–Ω–µ"
    if (slider.dataset.initial !== undefined) slider.value = slider.dataset.initial;
    
    const valDisplay = slider.parentElement.querySelector(".val-display");
    if (valDisplay) valDisplay.textContent = slider.value;
  });
  updateFilters();
}

const winnersBtn = document.getElementById("winnersBtn");
const winnersModal = document.getElementById("winnersModal");
const closeBtn = winnersModal.querySelector(".close");
const winnersList = document.getElementById("winnersList");

winnersBtn.addEventListener("click", async () => {
  winnersModal.style.display = "block";
  try {
    const res = await fetch("/winners");
    const data = await res.json();
    winnersList.innerHTML = "";
    if (!data.winners || data.winners.length === 0) {
      winnersList.innerHTML = "<li>–©–µ –Ω–µ–º–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ üïπÔ∏è</li>";
    } else {
      data.winners.forEach(w => {
        const li = document.createElement("li");
        li.textContent = w;
        winnersList.appendChild(li);
      });
    }
  } catch (err) {
    winnersList.innerHTML = "<li>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚ùå</li>";
  }
});

closeBtn.addEventListener("click", () => {
  winnersModal.style.display = "none";
});

window.addEventListener("click", (e) => {
  if (e.target === winnersModal) winnersModal.style.display = "none";
});


// –ó–∞–∫—Ä–∏—Ç–∏ (—Ö—Ä–µ—Å—Ç–∏–∫)
closeBtn.addEventListener("click", () => {
  winnersModal.style.display = "none";
});

// –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –≤—ñ–∫–Ω–æ–º
window.addEventListener("click", (event) => {
  if (event.target === winnersModal) {
    winnersModal.style.display = "none";
  }
});


const hintBtn = document.getElementById("hintBtn");
const hintModal = document.getElementById("hintModal");
const originalImg = document.getElementById("originalPhoto");
const hintClose = document.getElementById("hintClose");

hintBtn.addEventListener("click", () => {
  if (!currentPhoto) return;
  originalImg.src = currentPhoto.original || currentPhoto.path; // –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö
  hintModal.style.display = "block";
});

hintClose.addEventListener("click", () => {
  hintModal.style.display = "none";
});

// –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
window.addEventListener("click", (e) => {
  if (e.target === hintModal) hintModal.style.display = "none";
});



// –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
window.addEventListener("click", (e) => {
  if (e.target === hintModal) hintModal.style.display = "none";
});

const skipBtn = document.getElementById("skipBtn");

skipBtn.addEventListener("click", () => {
  const levelText = document.getElementById("level").textContent;
  const match = levelText.match(/–†—ñ–≤–µ–Ω—å (\d+) –∑ (\d+)/);
  if (match) {
    const level = parseInt(match[1]);
    const total = parseInt(match[2]);
    if (level === total) {
      alert("–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å!");
    } else {
      loadPhoto(); // –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ
      resetSlidersToInitial();
      document.getElementById("result").classList.remove("show");
    }
  }
});


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.onload = () => {
  // —Å–ª—É—Ö–∞—á –¥–æ–¥–∞—î–º–æ –æ–¥–∏–Ω —Ä–∞–∑
  const diffEl = document.getElementById("difficulty");
  if (diffEl) {
    diffEl.addEventListener("change", () => {
      resetSlidersToInitial();
    });
  }

  loadPhoto();
};
